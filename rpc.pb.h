// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rpc_2eproto;
class AddRequestMessage;
class AddRequestMessageDefaultTypeInternal;
extern AddRequestMessageDefaultTypeInternal _AddRequestMessage_default_instance_;
class AddResponseMessage;
class AddResponseMessageDefaultTypeInternal;
extern AddResponseMessageDefaultTypeInternal _AddResponseMessage_default_instance_;
class ClearRequestMessage;
class ClearRequestMessageDefaultTypeInternal;
extern ClearRequestMessageDefaultTypeInternal _ClearRequestMessage_default_instance_;
class ClearResponseMessage;
class ClearResponseMessageDefaultTypeInternal;
extern ClearResponseMessageDefaultTypeInternal _ClearResponseMessage_default_instance_;
class DeleteRequestMessage;
class DeleteRequestMessageDefaultTypeInternal;
extern DeleteRequestMessageDefaultTypeInternal _DeleteRequestMessage_default_instance_;
class DeleteResponseMessage;
class DeleteResponseMessageDefaultTypeInternal;
extern DeleteResponseMessageDefaultTypeInternal _DeleteResponseMessage_default_instance_;
class DestroyRequestMessage;
class DestroyRequestMessageDefaultTypeInternal;
extern DestroyRequestMessageDefaultTypeInternal _DestroyRequestMessage_default_instance_;
class DestroyResponseMessage;
class DestroyResponseMessageDefaultTypeInternal;
extern DestroyResponseMessageDefaultTypeInternal _DestroyResponseMessage_default_instance_;
class RandomGenerateDBRequestMessage;
class RandomGenerateDBRequestMessageDefaultTypeInternal;
extern RandomGenerateDBRequestMessageDefaultTypeInternal _RandomGenerateDBRequestMessage_default_instance_;
class RandomGenerateDBResponseMessage;
class RandomGenerateDBResponseMessageDefaultTypeInternal;
extern RandomGenerateDBResponseMessageDefaultTypeInternal _RandomGenerateDBResponseMessage_default_instance_;
class SearchRequestMessage;
class SearchRequestMessageDefaultTypeInternal;
extern SearchRequestMessageDefaultTypeInternal _SearchRequestMessage_default_instance_;
class SearchResponseMessage;
class SearchResponseMessageDefaultTypeInternal;
extern SearchResponseMessageDefaultTypeInternal _SearchResponseMessage_default_instance_;
class SetupRequestMessage;
class SetupRequestMessageDefaultTypeInternal;
extern SetupRequestMessageDefaultTypeInternal _SetupRequestMessage_default_instance_;
class SetupResponseMessage;
class SetupResponseMessageDefaultTypeInternal;
extern SetupResponseMessageDefaultTypeInternal _SetupResponseMessage_default_instance_;
class ShowAllRequestMessage;
class ShowAllRequestMessageDefaultTypeInternal;
extern ShowAllRequestMessageDefaultTypeInternal _ShowAllRequestMessage_default_instance_;
class ShowAllResponseMessage;
class ShowAllResponseMessageDefaultTypeInternal;
extern ShowAllResponseMessageDefaultTypeInternal _ShowAllResponseMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AddRequestMessage* Arena::CreateMaybeMessage<::AddRequestMessage>(Arena*);
template<> ::AddResponseMessage* Arena::CreateMaybeMessage<::AddResponseMessage>(Arena*);
template<> ::ClearRequestMessage* Arena::CreateMaybeMessage<::ClearRequestMessage>(Arena*);
template<> ::ClearResponseMessage* Arena::CreateMaybeMessage<::ClearResponseMessage>(Arena*);
template<> ::DeleteRequestMessage* Arena::CreateMaybeMessage<::DeleteRequestMessage>(Arena*);
template<> ::DeleteResponseMessage* Arena::CreateMaybeMessage<::DeleteResponseMessage>(Arena*);
template<> ::DestroyRequestMessage* Arena::CreateMaybeMessage<::DestroyRequestMessage>(Arena*);
template<> ::DestroyResponseMessage* Arena::CreateMaybeMessage<::DestroyResponseMessage>(Arena*);
template<> ::RandomGenerateDBRequestMessage* Arena::CreateMaybeMessage<::RandomGenerateDBRequestMessage>(Arena*);
template<> ::RandomGenerateDBResponseMessage* Arena::CreateMaybeMessage<::RandomGenerateDBResponseMessage>(Arena*);
template<> ::SearchRequestMessage* Arena::CreateMaybeMessage<::SearchRequestMessage>(Arena*);
template<> ::SearchResponseMessage* Arena::CreateMaybeMessage<::SearchResponseMessage>(Arena*);
template<> ::SetupRequestMessage* Arena::CreateMaybeMessage<::SetupRequestMessage>(Arena*);
template<> ::SetupResponseMessage* Arena::CreateMaybeMessage<::SetupResponseMessage>(Arena*);
template<> ::ShowAllRequestMessage* Arena::CreateMaybeMessage<::ShowAllRequestMessage>(Arena*);
template<> ::ShowAllResponseMessage* Arena::CreateMaybeMessage<::ShowAllResponseMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SetupRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetupRequestMessage) */ {
 public:
  inline SetupRequestMessage() : SetupRequestMessage(nullptr) {}
  virtual ~SetupRequestMessage();

  SetupRequestMessage(const SetupRequestMessage& from);
  SetupRequestMessage(SetupRequestMessage&& from) noexcept
    : SetupRequestMessage() {
    *this = ::std::move(from);
  }

  inline SetupRequestMessage& operator=(const SetupRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupRequestMessage& operator=(SetupRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupRequestMessage& default_instance();

  static inline const SetupRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SetupRequestMessage*>(
               &_SetupRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetupRequestMessage& a, SetupRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupRequestMessage* New() const final {
    return CreateMaybeMessage<SetupRequestMessage>(nullptr);
  }

  SetupRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupRequestMessage& from);
  void MergeFrom(const SetupRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetupRequestMessage";
  }
  protected:
  explicit SetupRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetupRequestFieldNumber = 1,
  };
  // string setup_request = 1;
  void clear_setup_request();
  const std::string& setup_request() const;
  void set_setup_request(const std::string& value);
  void set_setup_request(std::string&& value);
  void set_setup_request(const char* value);
  void set_setup_request(const char* value, size_t size);
  std::string* mutable_setup_request();
  std::string* release_setup_request();
  void set_allocated_setup_request(std::string* setup_request);
  private:
  const std::string& _internal_setup_request() const;
  void _internal_set_setup_request(const std::string& value);
  std::string* _internal_mutable_setup_request();
  public:

  // @@protoc_insertion_point(class_scope:SetupRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setup_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SearchRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchRequestMessage) */ {
 public:
  inline SearchRequestMessage() : SearchRequestMessage(nullptr) {}
  virtual ~SearchRequestMessage();

  SearchRequestMessage(const SearchRequestMessage& from);
  SearchRequestMessage(SearchRequestMessage&& from) noexcept
    : SearchRequestMessage() {
    *this = ::std::move(from);
  }

  inline SearchRequestMessage& operator=(const SearchRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequestMessage& operator=(SearchRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchRequestMessage& default_instance();

  static inline const SearchRequestMessage* internal_default_instance() {
    return reinterpret_cast<const SearchRequestMessage*>(
               &_SearchRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequestMessage& a, SearchRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchRequestMessage* New() const final {
    return CreateMaybeMessage<SearchRequestMessage>(nullptr);
  }

  SearchRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchRequestMessage& from);
  void MergeFrom(const SearchRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchRequestMessage";
  }
  protected:
  explicit SearchRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchRequestFieldNumber = 2,
    kIsKeyFieldNumber = 1,
  };
  // string search_request = 2;
  void clear_search_request();
  const std::string& search_request() const;
  void set_search_request(const std::string& value);
  void set_search_request(std::string&& value);
  void set_search_request(const char* value);
  void set_search_request(const char* value, size_t size);
  std::string* mutable_search_request();
  std::string* release_search_request();
  void set_allocated_search_request(std::string* search_request);
  private:
  const std::string& _internal_search_request() const;
  void _internal_set_search_request(const std::string& value);
  std::string* _internal_mutable_search_request();
  public:

  // bool is_key = 1;
  void clear_is_key();
  bool is_key() const;
  void set_is_key(bool value);
  private:
  bool _internal_is_key() const;
  void _internal_set_is_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SearchRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr search_request_;
  bool is_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AddRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddRequestMessage) */ {
 public:
  inline AddRequestMessage() : AddRequestMessage(nullptr) {}
  virtual ~AddRequestMessage();

  AddRequestMessage(const AddRequestMessage& from);
  AddRequestMessage(AddRequestMessage&& from) noexcept
    : AddRequestMessage() {
    *this = ::std::move(from);
  }

  inline AddRequestMessage& operator=(const AddRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddRequestMessage& operator=(AddRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddRequestMessage& default_instance();

  static inline const AddRequestMessage* internal_default_instance() {
    return reinterpret_cast<const AddRequestMessage*>(
               &_AddRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AddRequestMessage& a, AddRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddRequestMessage* New() const final {
    return CreateMaybeMessage<AddRequestMessage>(nullptr);
  }

  AddRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddRequestMessage& from);
  void MergeFrom(const AddRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddRequestMessage";
  }
  protected:
  explicit AddRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddRequestKeyFieldNumber = 1,
    kAddRequestValueFieldNumber = 2,
  };
  // string add_request_key = 1;
  void clear_add_request_key();
  const std::string& add_request_key() const;
  void set_add_request_key(const std::string& value);
  void set_add_request_key(std::string&& value);
  void set_add_request_key(const char* value);
  void set_add_request_key(const char* value, size_t size);
  std::string* mutable_add_request_key();
  std::string* release_add_request_key();
  void set_allocated_add_request_key(std::string* add_request_key);
  private:
  const std::string& _internal_add_request_key() const;
  void _internal_set_add_request_key(const std::string& value);
  std::string* _internal_mutable_add_request_key();
  public:

  // string add_request_value = 2;
  void clear_add_request_value();
  const std::string& add_request_value() const;
  void set_add_request_value(const std::string& value);
  void set_add_request_value(std::string&& value);
  void set_add_request_value(const char* value);
  void set_add_request_value(const char* value, size_t size);
  std::string* mutable_add_request_value();
  std::string* release_add_request_value();
  void set_allocated_add_request_value(std::string* add_request_value);
  private:
  const std::string& _internal_add_request_value() const;
  void _internal_set_add_request_value(const std::string& value);
  std::string* _internal_mutable_add_request_value();
  public:

  // @@protoc_insertion_point(class_scope:AddRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_request_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_request_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteRequestMessage) */ {
 public:
  inline DeleteRequestMessage() : DeleteRequestMessage(nullptr) {}
  virtual ~DeleteRequestMessage();

  DeleteRequestMessage(const DeleteRequestMessage& from);
  DeleteRequestMessage(DeleteRequestMessage&& from) noexcept
    : DeleteRequestMessage() {
    *this = ::std::move(from);
  }

  inline DeleteRequestMessage& operator=(const DeleteRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRequestMessage& operator=(DeleteRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteRequestMessage& default_instance();

  static inline const DeleteRequestMessage* internal_default_instance() {
    return reinterpret_cast<const DeleteRequestMessage*>(
               &_DeleteRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteRequestMessage& a, DeleteRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRequestMessage* New() const final {
    return CreateMaybeMessage<DeleteRequestMessage>(nullptr);
  }

  DeleteRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteRequestMessage& from);
  void MergeFrom(const DeleteRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteRequestMessage";
  }
  protected:
  explicit DeleteRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteRequestFieldNumber = 2,
    kIsKeyFieldNumber = 1,
  };
  // string delete_request = 2;
  void clear_delete_request();
  const std::string& delete_request() const;
  void set_delete_request(const std::string& value);
  void set_delete_request(std::string&& value);
  void set_delete_request(const char* value);
  void set_delete_request(const char* value, size_t size);
  std::string* mutable_delete_request();
  std::string* release_delete_request();
  void set_allocated_delete_request(std::string* delete_request);
  private:
  const std::string& _internal_delete_request() const;
  void _internal_set_delete_request(const std::string& value);
  std::string* _internal_mutable_delete_request();
  public:

  // bool is_key = 1;
  void clear_is_key();
  bool is_key() const;
  void set_is_key(bool value);
  private:
  bool _internal_is_key() const;
  void _internal_set_is_key(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DeleteRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delete_request_;
  bool is_key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ShowAllRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShowAllRequestMessage) */ {
 public:
  inline ShowAllRequestMessage() : ShowAllRequestMessage(nullptr) {}
  virtual ~ShowAllRequestMessage();

  ShowAllRequestMessage(const ShowAllRequestMessage& from);
  ShowAllRequestMessage(ShowAllRequestMessage&& from) noexcept
    : ShowAllRequestMessage() {
    *this = ::std::move(from);
  }

  inline ShowAllRequestMessage& operator=(const ShowAllRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowAllRequestMessage& operator=(ShowAllRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowAllRequestMessage& default_instance();

  static inline const ShowAllRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ShowAllRequestMessage*>(
               &_ShowAllRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShowAllRequestMessage& a, ShowAllRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowAllRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowAllRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowAllRequestMessage* New() const final {
    return CreateMaybeMessage<ShowAllRequestMessage>(nullptr);
  }

  ShowAllRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowAllRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowAllRequestMessage& from);
  void MergeFrom(const ShowAllRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowAllRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShowAllRequestMessage";
  }
  protected:
  explicit ShowAllRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowallRequestFieldNumber = 1,
  };
  // string showall_request = 1;
  void clear_showall_request();
  const std::string& showall_request() const;
  void set_showall_request(const std::string& value);
  void set_showall_request(std::string&& value);
  void set_showall_request(const char* value);
  void set_showall_request(const char* value, size_t size);
  std::string* mutable_showall_request();
  std::string* release_showall_request();
  void set_allocated_showall_request(std::string* showall_request);
  private:
  const std::string& _internal_showall_request() const;
  void _internal_set_showall_request(const std::string& value);
  std::string* _internal_mutable_showall_request();
  public:

  // @@protoc_insertion_point(class_scope:ShowAllRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr showall_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RandomGenerateDBRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RandomGenerateDBRequestMessage) */ {
 public:
  inline RandomGenerateDBRequestMessage() : RandomGenerateDBRequestMessage(nullptr) {}
  virtual ~RandomGenerateDBRequestMessage();

  RandomGenerateDBRequestMessage(const RandomGenerateDBRequestMessage& from);
  RandomGenerateDBRequestMessage(RandomGenerateDBRequestMessage&& from) noexcept
    : RandomGenerateDBRequestMessage() {
    *this = ::std::move(from);
  }

  inline RandomGenerateDBRequestMessage& operator=(const RandomGenerateDBRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomGenerateDBRequestMessage& operator=(RandomGenerateDBRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomGenerateDBRequestMessage& default_instance();

  static inline const RandomGenerateDBRequestMessage* internal_default_instance() {
    return reinterpret_cast<const RandomGenerateDBRequestMessage*>(
               &_RandomGenerateDBRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RandomGenerateDBRequestMessage& a, RandomGenerateDBRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomGenerateDBRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomGenerateDBRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomGenerateDBRequestMessage* New() const final {
    return CreateMaybeMessage<RandomGenerateDBRequestMessage>(nullptr);
  }

  RandomGenerateDBRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomGenerateDBRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomGenerateDBRequestMessage& from);
  void MergeFrom(const RandomGenerateDBRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomGenerateDBRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RandomGenerateDBRequestMessage";
  }
  protected:
  explicit RandomGenerateDBRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenRequestKeyFieldNumber = 1,
    kGenRequestValueFieldNumber = 2,
  };
  // repeated string gen_request_key = 1;
  int gen_request_key_size() const;
  private:
  int _internal_gen_request_key_size() const;
  public:
  void clear_gen_request_key();
  const std::string& gen_request_key(int index) const;
  std::string* mutable_gen_request_key(int index);
  void set_gen_request_key(int index, const std::string& value);
  void set_gen_request_key(int index, std::string&& value);
  void set_gen_request_key(int index, const char* value);
  void set_gen_request_key(int index, const char* value, size_t size);
  std::string* add_gen_request_key();
  void add_gen_request_key(const std::string& value);
  void add_gen_request_key(std::string&& value);
  void add_gen_request_key(const char* value);
  void add_gen_request_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gen_request_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gen_request_key();
  private:
  const std::string& _internal_gen_request_key(int index) const;
  std::string* _internal_add_gen_request_key();
  public:

  // repeated string gen_request_value = 2;
  int gen_request_value_size() const;
  private:
  int _internal_gen_request_value_size() const;
  public:
  void clear_gen_request_value();
  const std::string& gen_request_value(int index) const;
  std::string* mutable_gen_request_value(int index);
  void set_gen_request_value(int index, const std::string& value);
  void set_gen_request_value(int index, std::string&& value);
  void set_gen_request_value(int index, const char* value);
  void set_gen_request_value(int index, const char* value, size_t size);
  std::string* add_gen_request_value();
  void add_gen_request_value(const std::string& value);
  void add_gen_request_value(std::string&& value);
  void add_gen_request_value(const char* value);
  void add_gen_request_value(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& gen_request_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_gen_request_value();
  private:
  const std::string& _internal_gen_request_value(int index) const;
  std::string* _internal_add_gen_request_value();
  public:

  // @@protoc_insertion_point(class_scope:RandomGenerateDBRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gen_request_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> gen_request_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClearRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClearRequestMessage) */ {
 public:
  inline ClearRequestMessage() : ClearRequestMessage(nullptr) {}
  virtual ~ClearRequestMessage();

  ClearRequestMessage(const ClearRequestMessage& from);
  ClearRequestMessage(ClearRequestMessage&& from) noexcept
    : ClearRequestMessage() {
    *this = ::std::move(from);
  }

  inline ClearRequestMessage& operator=(const ClearRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearRequestMessage& operator=(ClearRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearRequestMessage& default_instance();

  static inline const ClearRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ClearRequestMessage*>(
               &_ClearRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ClearRequestMessage& a, ClearRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearRequestMessage* New() const final {
    return CreateMaybeMessage<ClearRequestMessage>(nullptr);
  }

  ClearRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearRequestMessage& from);
  void MergeFrom(const ClearRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClearRequestMessage";
  }
  protected:
  explicit ClearRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearRequestFieldNumber = 1,
  };
  // string clear_request = 1;
  void clear_clear_request();
  const std::string& clear_request() const;
  void set_clear_request(const std::string& value);
  void set_clear_request(std::string&& value);
  void set_clear_request(const char* value);
  void set_clear_request(const char* value, size_t size);
  std::string* mutable_clear_request();
  std::string* release_clear_request();
  void set_allocated_clear_request(std::string* clear_request);
  private:
  const std::string& _internal_clear_request() const;
  void _internal_set_clear_request(const std::string& value);
  std::string* _internal_mutable_clear_request();
  public:

  // @@protoc_insertion_point(class_scope:ClearRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clear_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DestroyRequestMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DestroyRequestMessage) */ {
 public:
  inline DestroyRequestMessage() : DestroyRequestMessage(nullptr) {}
  virtual ~DestroyRequestMessage();

  DestroyRequestMessage(const DestroyRequestMessage& from);
  DestroyRequestMessage(DestroyRequestMessage&& from) noexcept
    : DestroyRequestMessage() {
    *this = ::std::move(from);
  }

  inline DestroyRequestMessage& operator=(const DestroyRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRequestMessage& operator=(DestroyRequestMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyRequestMessage& default_instance();

  static inline const DestroyRequestMessage* internal_default_instance() {
    return reinterpret_cast<const DestroyRequestMessage*>(
               &_DestroyRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DestroyRequestMessage& a, DestroyRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRequestMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyRequestMessage* New() const final {
    return CreateMaybeMessage<DestroyRequestMessage>(nullptr);
  }

  DestroyRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyRequestMessage& from);
  void MergeFrom(const DestroyRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DestroyRequestMessage";
  }
  protected:
  explicit DestroyRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestroyRequestFieldNumber = 1,
  };
  // string destroy_request = 1;
  void clear_destroy_request();
  const std::string& destroy_request() const;
  void set_destroy_request(const std::string& value);
  void set_destroy_request(std::string&& value);
  void set_destroy_request(const char* value);
  void set_destroy_request(const char* value, size_t size);
  std::string* mutable_destroy_request();
  std::string* release_destroy_request();
  void set_allocated_destroy_request(std::string* destroy_request);
  private:
  const std::string& _internal_destroy_request() const;
  void _internal_set_destroy_request(const std::string& value);
  std::string* _internal_mutable_destroy_request();
  public:

  // @@protoc_insertion_point(class_scope:DestroyRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destroy_request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SetupResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetupResponseMessage) */ {
 public:
  inline SetupResponseMessage() : SetupResponseMessage(nullptr) {}
  virtual ~SetupResponseMessage();

  SetupResponseMessage(const SetupResponseMessage& from);
  SetupResponseMessage(SetupResponseMessage&& from) noexcept
    : SetupResponseMessage() {
    *this = ::std::move(from);
  }

  inline SetupResponseMessage& operator=(const SetupResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupResponseMessage& operator=(SetupResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupResponseMessage& default_instance();

  static inline const SetupResponseMessage* internal_default_instance() {
    return reinterpret_cast<const SetupResponseMessage*>(
               &_SetupResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetupResponseMessage& a, SetupResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupResponseMessage* New() const final {
    return CreateMaybeMessage<SetupResponseMessage>(nullptr);
  }

  SetupResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupResponseMessage& from);
  void MergeFrom(const SetupResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetupResponseMessage";
  }
  protected:
  explicit SetupResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSetupResponseFieldNumber = 1,
  };
  // string setup_response = 1;
  void clear_setup_response();
  const std::string& setup_response() const;
  void set_setup_response(const std::string& value);
  void set_setup_response(std::string&& value);
  void set_setup_response(const char* value);
  void set_setup_response(const char* value, size_t size);
  std::string* mutable_setup_response();
  std::string* release_setup_response();
  void set_allocated_setup_response(std::string* setup_response);
  private:
  const std::string& _internal_setup_response() const;
  void _internal_set_setup_response(const std::string& value);
  std::string* _internal_mutable_setup_response();
  public:

  // @@protoc_insertion_point(class_scope:SetupResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr setup_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class SearchResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SearchResponseMessage) */ {
 public:
  inline SearchResponseMessage() : SearchResponseMessage(nullptr) {}
  virtual ~SearchResponseMessage();

  SearchResponseMessage(const SearchResponseMessage& from);
  SearchResponseMessage(SearchResponseMessage&& from) noexcept
    : SearchResponseMessage() {
    *this = ::std::move(from);
  }

  inline SearchResponseMessage& operator=(const SearchResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchResponseMessage& operator=(SearchResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchResponseMessage& default_instance();

  static inline const SearchResponseMessage* internal_default_instance() {
    return reinterpret_cast<const SearchResponseMessage*>(
               &_SearchResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SearchResponseMessage& a, SearchResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchResponseMessage* New() const final {
    return CreateMaybeMessage<SearchResponseMessage>(nullptr);
  }

  SearchResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchResponseMessage& from);
  void MergeFrom(const SearchResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SearchResponseMessage";
  }
  protected:
  explicit SearchResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSearchResponseFieldNumber = 1,
  };
  // repeated string search_response = 1;
  int search_response_size() const;
  private:
  int _internal_search_response_size() const;
  public:
  void clear_search_response();
  const std::string& search_response(int index) const;
  std::string* mutable_search_response(int index);
  void set_search_response(int index, const std::string& value);
  void set_search_response(int index, std::string&& value);
  void set_search_response(int index, const char* value);
  void set_search_response(int index, const char* value, size_t size);
  std::string* add_search_response();
  void add_search_response(const std::string& value);
  void add_search_response(std::string&& value);
  void add_search_response(const char* value);
  void add_search_response(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& search_response() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_search_response();
  private:
  const std::string& _internal_search_response(int index) const;
  std::string* _internal_add_search_response();
  public:

  // @@protoc_insertion_point(class_scope:SearchResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> search_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class AddResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AddResponseMessage) */ {
 public:
  inline AddResponseMessage() : AddResponseMessage(nullptr) {}
  virtual ~AddResponseMessage();

  AddResponseMessage(const AddResponseMessage& from);
  AddResponseMessage(AddResponseMessage&& from) noexcept
    : AddResponseMessage() {
    *this = ::std::move(from);
  }

  inline AddResponseMessage& operator=(const AddResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddResponseMessage& operator=(AddResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddResponseMessage& default_instance();

  static inline const AddResponseMessage* internal_default_instance() {
    return reinterpret_cast<const AddResponseMessage*>(
               &_AddResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddResponseMessage& a, AddResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AddResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddResponseMessage* New() const final {
    return CreateMaybeMessage<AddResponseMessage>(nullptr);
  }

  AddResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddResponseMessage& from);
  void MergeFrom(const AddResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AddResponseMessage";
  }
  protected:
  explicit AddResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddResponseFieldNumber = 1,
  };
  // string add_response = 1;
  void clear_add_response();
  const std::string& add_response() const;
  void set_add_response(const std::string& value);
  void set_add_response(std::string&& value);
  void set_add_response(const char* value);
  void set_add_response(const char* value, size_t size);
  std::string* mutable_add_response();
  std::string* release_add_response();
  void set_allocated_add_response(std::string* add_response);
  private:
  const std::string& _internal_add_response() const;
  void _internal_set_add_response(const std::string& value);
  std::string* _internal_mutable_add_response();
  public:

  // @@protoc_insertion_point(class_scope:AddResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr add_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DeleteResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DeleteResponseMessage) */ {
 public:
  inline DeleteResponseMessage() : DeleteResponseMessage(nullptr) {}
  virtual ~DeleteResponseMessage();

  DeleteResponseMessage(const DeleteResponseMessage& from);
  DeleteResponseMessage(DeleteResponseMessage&& from) noexcept
    : DeleteResponseMessage() {
    *this = ::std::move(from);
  }

  inline DeleteResponseMessage& operator=(const DeleteResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteResponseMessage& operator=(DeleteResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteResponseMessage& default_instance();

  static inline const DeleteResponseMessage* internal_default_instance() {
    return reinterpret_cast<const DeleteResponseMessage*>(
               &_DeleteResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteResponseMessage& a, DeleteResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteResponseMessage* New() const final {
    return CreateMaybeMessage<DeleteResponseMessage>(nullptr);
  }

  DeleteResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteResponseMessage& from);
  void MergeFrom(const DeleteResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DeleteResponseMessage";
  }
  protected:
  explicit DeleteResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeleteResponseFieldNumber = 1,
  };
  // repeated string delete_response = 1;
  int delete_response_size() const;
  private:
  int _internal_delete_response_size() const;
  public:
  void clear_delete_response();
  const std::string& delete_response(int index) const;
  std::string* mutable_delete_response(int index);
  void set_delete_response(int index, const std::string& value);
  void set_delete_response(int index, std::string&& value);
  void set_delete_response(int index, const char* value);
  void set_delete_response(int index, const char* value, size_t size);
  std::string* add_delete_response();
  void add_delete_response(const std::string& value);
  void add_delete_response(std::string&& value);
  void add_delete_response(const char* value);
  void add_delete_response(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delete_response() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delete_response();
  private:
  const std::string& _internal_delete_response(int index) const;
  std::string* _internal_add_delete_response();
  public:

  // @@protoc_insertion_point(class_scope:DeleteResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delete_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ShowAllResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ShowAllResponseMessage) */ {
 public:
  inline ShowAllResponseMessage() : ShowAllResponseMessage(nullptr) {}
  virtual ~ShowAllResponseMessage();

  ShowAllResponseMessage(const ShowAllResponseMessage& from);
  ShowAllResponseMessage(ShowAllResponseMessage&& from) noexcept
    : ShowAllResponseMessage() {
    *this = ::std::move(from);
  }

  inline ShowAllResponseMessage& operator=(const ShowAllResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowAllResponseMessage& operator=(ShowAllResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowAllResponseMessage& default_instance();

  static inline const ShowAllResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ShowAllResponseMessage*>(
               &_ShowAllResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ShowAllResponseMessage& a, ShowAllResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowAllResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowAllResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowAllResponseMessage* New() const final {
    return CreateMaybeMessage<ShowAllResponseMessage>(nullptr);
  }

  ShowAllResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowAllResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowAllResponseMessage& from);
  void MergeFrom(const ShowAllResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowAllResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ShowAllResponseMessage";
  }
  protected:
  explicit ShowAllResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowallResponseFieldNumber = 1,
  };
  // repeated string showall_response = 1;
  int showall_response_size() const;
  private:
  int _internal_showall_response_size() const;
  public:
  void clear_showall_response();
  const std::string& showall_response(int index) const;
  std::string* mutable_showall_response(int index);
  void set_showall_response(int index, const std::string& value);
  void set_showall_response(int index, std::string&& value);
  void set_showall_response(int index, const char* value);
  void set_showall_response(int index, const char* value, size_t size);
  std::string* add_showall_response();
  void add_showall_response(const std::string& value);
  void add_showall_response(std::string&& value);
  void add_showall_response(const char* value);
  void add_showall_response(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& showall_response() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_showall_response();
  private:
  const std::string& _internal_showall_response(int index) const;
  std::string* _internal_add_showall_response();
  public:

  // @@protoc_insertion_point(class_scope:ShowAllResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> showall_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class RandomGenerateDBResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RandomGenerateDBResponseMessage) */ {
 public:
  inline RandomGenerateDBResponseMessage() : RandomGenerateDBResponseMessage(nullptr) {}
  virtual ~RandomGenerateDBResponseMessage();

  RandomGenerateDBResponseMessage(const RandomGenerateDBResponseMessage& from);
  RandomGenerateDBResponseMessage(RandomGenerateDBResponseMessage&& from) noexcept
    : RandomGenerateDBResponseMessage() {
    *this = ::std::move(from);
  }

  inline RandomGenerateDBResponseMessage& operator=(const RandomGenerateDBResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RandomGenerateDBResponseMessage& operator=(RandomGenerateDBResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RandomGenerateDBResponseMessage& default_instance();

  static inline const RandomGenerateDBResponseMessage* internal_default_instance() {
    return reinterpret_cast<const RandomGenerateDBResponseMessage*>(
               &_RandomGenerateDBResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RandomGenerateDBResponseMessage& a, RandomGenerateDBResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RandomGenerateDBResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RandomGenerateDBResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RandomGenerateDBResponseMessage* New() const final {
    return CreateMaybeMessage<RandomGenerateDBResponseMessage>(nullptr);
  }

  RandomGenerateDBResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RandomGenerateDBResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RandomGenerateDBResponseMessage& from);
  void MergeFrom(const RandomGenerateDBResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RandomGenerateDBResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RandomGenerateDBResponseMessage";
  }
  protected:
  explicit RandomGenerateDBResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenResponseFieldNumber = 1,
  };
  // string gen_response = 1;
  void clear_gen_response();
  const std::string& gen_response() const;
  void set_gen_response(const std::string& value);
  void set_gen_response(std::string&& value);
  void set_gen_response(const char* value);
  void set_gen_response(const char* value, size_t size);
  std::string* mutable_gen_response();
  std::string* release_gen_response();
  void set_allocated_gen_response(std::string* gen_response);
  private:
  const std::string& _internal_gen_response() const;
  void _internal_set_gen_response(const std::string& value);
  std::string* _internal_mutable_gen_response();
  public:

  // @@protoc_insertion_point(class_scope:RandomGenerateDBResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gen_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class ClearResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClearResponseMessage) */ {
 public:
  inline ClearResponseMessage() : ClearResponseMessage(nullptr) {}
  virtual ~ClearResponseMessage();

  ClearResponseMessage(const ClearResponseMessage& from);
  ClearResponseMessage(ClearResponseMessage&& from) noexcept
    : ClearResponseMessage() {
    *this = ::std::move(from);
  }

  inline ClearResponseMessage& operator=(const ClearResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearResponseMessage& operator=(ClearResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearResponseMessage& default_instance();

  static inline const ClearResponseMessage* internal_default_instance() {
    return reinterpret_cast<const ClearResponseMessage*>(
               &_ClearResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ClearResponseMessage& a, ClearResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearResponseMessage* New() const final {
    return CreateMaybeMessage<ClearResponseMessage>(nullptr);
  }

  ClearResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearResponseMessage& from);
  void MergeFrom(const ClearResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClearResponseMessage";
  }
  protected:
  explicit ClearResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClearResponseFieldNumber = 1,
  };
  // string clear_response = 1;
  void clear_clear_response();
  const std::string& clear_response() const;
  void set_clear_response(const std::string& value);
  void set_clear_response(std::string&& value);
  void set_clear_response(const char* value);
  void set_clear_response(const char* value, size_t size);
  std::string* mutable_clear_response();
  std::string* release_clear_response();
  void set_allocated_clear_response(std::string* clear_response);
  private:
  const std::string& _internal_clear_response() const;
  void _internal_set_clear_response(const std::string& value);
  std::string* _internal_mutable_clear_response();
  public:

  // @@protoc_insertion_point(class_scope:ClearResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clear_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// -------------------------------------------------------------------

class DestroyResponseMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DestroyResponseMessage) */ {
 public:
  inline DestroyResponseMessage() : DestroyResponseMessage(nullptr) {}
  virtual ~DestroyResponseMessage();

  DestroyResponseMessage(const DestroyResponseMessage& from);
  DestroyResponseMessage(DestroyResponseMessage&& from) noexcept
    : DestroyResponseMessage() {
    *this = ::std::move(from);
  }

  inline DestroyResponseMessage& operator=(const DestroyResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyResponseMessage& operator=(DestroyResponseMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DestroyResponseMessage& default_instance();

  static inline const DestroyResponseMessage* internal_default_instance() {
    return reinterpret_cast<const DestroyResponseMessage*>(
               &_DestroyResponseMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DestroyResponseMessage& a, DestroyResponseMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyResponseMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyResponseMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DestroyResponseMessage* New() const final {
    return CreateMaybeMessage<DestroyResponseMessage>(nullptr);
  }

  DestroyResponseMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DestroyResponseMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DestroyResponseMessage& from);
  void MergeFrom(const DestroyResponseMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DestroyResponseMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DestroyResponseMessage";
  }
  protected:
  explicit DestroyResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rpc_2eproto);
    return ::descriptor_table_rpc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestroyResponseFieldNumber = 1,
  };
  // string destroy_response = 1;
  void clear_destroy_response();
  const std::string& destroy_response() const;
  void set_destroy_response(const std::string& value);
  void set_destroy_response(std::string&& value);
  void set_destroy_response(const char* value);
  void set_destroy_response(const char* value, size_t size);
  std::string* mutable_destroy_response();
  std::string* release_destroy_response();
  void set_allocated_destroy_response(std::string* destroy_response);
  private:
  const std::string& _internal_destroy_response() const;
  void _internal_set_destroy_response(const std::string& value);
  std::string* _internal_mutable_destroy_response();
  public:

  // @@protoc_insertion_point(class_scope:DestroyResponseMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destroy_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetupRequestMessage

// string setup_request = 1;
inline void SetupRequestMessage::clear_setup_request() {
  setup_request_.ClearToEmpty();
}
inline const std::string& SetupRequestMessage::setup_request() const {
  // @@protoc_insertion_point(field_get:SetupRequestMessage.setup_request)
  return _internal_setup_request();
}
inline void SetupRequestMessage::set_setup_request(const std::string& value) {
  _internal_set_setup_request(value);
  // @@protoc_insertion_point(field_set:SetupRequestMessage.setup_request)
}
inline std::string* SetupRequestMessage::mutable_setup_request() {
  // @@protoc_insertion_point(field_mutable:SetupRequestMessage.setup_request)
  return _internal_mutable_setup_request();
}
inline const std::string& SetupRequestMessage::_internal_setup_request() const {
  return setup_request_.Get();
}
inline void SetupRequestMessage::_internal_set_setup_request(const std::string& value) {
  
  setup_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetupRequestMessage::set_setup_request(std::string&& value) {
  
  setup_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetupRequestMessage.setup_request)
}
inline void SetupRequestMessage::set_setup_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setup_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetupRequestMessage.setup_request)
}
inline void SetupRequestMessage::set_setup_request(const char* value,
    size_t size) {
  
  setup_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetupRequestMessage.setup_request)
}
inline std::string* SetupRequestMessage::_internal_mutable_setup_request() {
  
  return setup_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetupRequestMessage::release_setup_request() {
  // @@protoc_insertion_point(field_release:SetupRequestMessage.setup_request)
  return setup_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupRequestMessage::set_allocated_setup_request(std::string* setup_request) {
  if (setup_request != nullptr) {
    
  } else {
    
  }
  setup_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setup_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetupRequestMessage.setup_request)
}

// -------------------------------------------------------------------

// SearchRequestMessage

// bool is_key = 1;
inline void SearchRequestMessage::clear_is_key() {
  is_key_ = false;
}
inline bool SearchRequestMessage::_internal_is_key() const {
  return is_key_;
}
inline bool SearchRequestMessage::is_key() const {
  // @@protoc_insertion_point(field_get:SearchRequestMessage.is_key)
  return _internal_is_key();
}
inline void SearchRequestMessage::_internal_set_is_key(bool value) {
  
  is_key_ = value;
}
inline void SearchRequestMessage::set_is_key(bool value) {
  _internal_set_is_key(value);
  // @@protoc_insertion_point(field_set:SearchRequestMessage.is_key)
}

// string search_request = 2;
inline void SearchRequestMessage::clear_search_request() {
  search_request_.ClearToEmpty();
}
inline const std::string& SearchRequestMessage::search_request() const {
  // @@protoc_insertion_point(field_get:SearchRequestMessage.search_request)
  return _internal_search_request();
}
inline void SearchRequestMessage::set_search_request(const std::string& value) {
  _internal_set_search_request(value);
  // @@protoc_insertion_point(field_set:SearchRequestMessage.search_request)
}
inline std::string* SearchRequestMessage::mutable_search_request() {
  // @@protoc_insertion_point(field_mutable:SearchRequestMessage.search_request)
  return _internal_mutable_search_request();
}
inline const std::string& SearchRequestMessage::_internal_search_request() const {
  return search_request_.Get();
}
inline void SearchRequestMessage::_internal_set_search_request(const std::string& value) {
  
  search_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SearchRequestMessage::set_search_request(std::string&& value) {
  
  search_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SearchRequestMessage.search_request)
}
inline void SearchRequestMessage::set_search_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  search_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SearchRequestMessage.search_request)
}
inline void SearchRequestMessage::set_search_request(const char* value,
    size_t size) {
  
  search_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SearchRequestMessage.search_request)
}
inline std::string* SearchRequestMessage::_internal_mutable_search_request() {
  
  return search_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SearchRequestMessage::release_search_request() {
  // @@protoc_insertion_point(field_release:SearchRequestMessage.search_request)
  return search_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchRequestMessage::set_allocated_search_request(std::string* search_request) {
  if (search_request != nullptr) {
    
  } else {
    
  }
  search_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), search_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SearchRequestMessage.search_request)
}

// -------------------------------------------------------------------

// AddRequestMessage

// string add_request_key = 1;
inline void AddRequestMessage::clear_add_request_key() {
  add_request_key_.ClearToEmpty();
}
inline const std::string& AddRequestMessage::add_request_key() const {
  // @@protoc_insertion_point(field_get:AddRequestMessage.add_request_key)
  return _internal_add_request_key();
}
inline void AddRequestMessage::set_add_request_key(const std::string& value) {
  _internal_set_add_request_key(value);
  // @@protoc_insertion_point(field_set:AddRequestMessage.add_request_key)
}
inline std::string* AddRequestMessage::mutable_add_request_key() {
  // @@protoc_insertion_point(field_mutable:AddRequestMessage.add_request_key)
  return _internal_mutable_add_request_key();
}
inline const std::string& AddRequestMessage::_internal_add_request_key() const {
  return add_request_key_.Get();
}
inline void AddRequestMessage::_internal_set_add_request_key(const std::string& value) {
  
  add_request_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddRequestMessage::set_add_request_key(std::string&& value) {
  
  add_request_key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequestMessage.add_request_key)
}
inline void AddRequestMessage::set_add_request_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  add_request_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequestMessage.add_request_key)
}
inline void AddRequestMessage::set_add_request_key(const char* value,
    size_t size) {
  
  add_request_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequestMessage.add_request_key)
}
inline std::string* AddRequestMessage::_internal_mutable_add_request_key() {
  
  return add_request_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddRequestMessage::release_add_request_key() {
  // @@protoc_insertion_point(field_release:AddRequestMessage.add_request_key)
  return add_request_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequestMessage::set_allocated_add_request_key(std::string* add_request_key) {
  if (add_request_key != nullptr) {
    
  } else {
    
  }
  add_request_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_request_key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequestMessage.add_request_key)
}

// string add_request_value = 2;
inline void AddRequestMessage::clear_add_request_value() {
  add_request_value_.ClearToEmpty();
}
inline const std::string& AddRequestMessage::add_request_value() const {
  // @@protoc_insertion_point(field_get:AddRequestMessage.add_request_value)
  return _internal_add_request_value();
}
inline void AddRequestMessage::set_add_request_value(const std::string& value) {
  _internal_set_add_request_value(value);
  // @@protoc_insertion_point(field_set:AddRequestMessage.add_request_value)
}
inline std::string* AddRequestMessage::mutable_add_request_value() {
  // @@protoc_insertion_point(field_mutable:AddRequestMessage.add_request_value)
  return _internal_mutable_add_request_value();
}
inline const std::string& AddRequestMessage::_internal_add_request_value() const {
  return add_request_value_.Get();
}
inline void AddRequestMessage::_internal_set_add_request_value(const std::string& value) {
  
  add_request_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddRequestMessage::set_add_request_value(std::string&& value) {
  
  add_request_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddRequestMessage.add_request_value)
}
inline void AddRequestMessage::set_add_request_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  add_request_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddRequestMessage.add_request_value)
}
inline void AddRequestMessage::set_add_request_value(const char* value,
    size_t size) {
  
  add_request_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddRequestMessage.add_request_value)
}
inline std::string* AddRequestMessage::_internal_mutable_add_request_value() {
  
  return add_request_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddRequestMessage::release_add_request_value() {
  // @@protoc_insertion_point(field_release:AddRequestMessage.add_request_value)
  return add_request_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddRequestMessage::set_allocated_add_request_value(std::string* add_request_value) {
  if (add_request_value != nullptr) {
    
  } else {
    
  }
  add_request_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_request_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddRequestMessage.add_request_value)
}

// -------------------------------------------------------------------

// DeleteRequestMessage

// bool is_key = 1;
inline void DeleteRequestMessage::clear_is_key() {
  is_key_ = false;
}
inline bool DeleteRequestMessage::_internal_is_key() const {
  return is_key_;
}
inline bool DeleteRequestMessage::is_key() const {
  // @@protoc_insertion_point(field_get:DeleteRequestMessage.is_key)
  return _internal_is_key();
}
inline void DeleteRequestMessage::_internal_set_is_key(bool value) {
  
  is_key_ = value;
}
inline void DeleteRequestMessage::set_is_key(bool value) {
  _internal_set_is_key(value);
  // @@protoc_insertion_point(field_set:DeleteRequestMessage.is_key)
}

// string delete_request = 2;
inline void DeleteRequestMessage::clear_delete_request() {
  delete_request_.ClearToEmpty();
}
inline const std::string& DeleteRequestMessage::delete_request() const {
  // @@protoc_insertion_point(field_get:DeleteRequestMessage.delete_request)
  return _internal_delete_request();
}
inline void DeleteRequestMessage::set_delete_request(const std::string& value) {
  _internal_set_delete_request(value);
  // @@protoc_insertion_point(field_set:DeleteRequestMessage.delete_request)
}
inline std::string* DeleteRequestMessage::mutable_delete_request() {
  // @@protoc_insertion_point(field_mutable:DeleteRequestMessage.delete_request)
  return _internal_mutable_delete_request();
}
inline const std::string& DeleteRequestMessage::_internal_delete_request() const {
  return delete_request_.Get();
}
inline void DeleteRequestMessage::_internal_set_delete_request(const std::string& value) {
  
  delete_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteRequestMessage::set_delete_request(std::string&& value) {
  
  delete_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DeleteRequestMessage.delete_request)
}
inline void DeleteRequestMessage::set_delete_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  delete_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DeleteRequestMessage.delete_request)
}
inline void DeleteRequestMessage::set_delete_request(const char* value,
    size_t size) {
  
  delete_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DeleteRequestMessage.delete_request)
}
inline std::string* DeleteRequestMessage::_internal_mutable_delete_request() {
  
  return delete_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteRequestMessage::release_delete_request() {
  // @@protoc_insertion_point(field_release:DeleteRequestMessage.delete_request)
  return delete_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteRequestMessage::set_allocated_delete_request(std::string* delete_request) {
  if (delete_request != nullptr) {
    
  } else {
    
  }
  delete_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), delete_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DeleteRequestMessage.delete_request)
}

// -------------------------------------------------------------------

// ShowAllRequestMessage

// string showall_request = 1;
inline void ShowAllRequestMessage::clear_showall_request() {
  showall_request_.ClearToEmpty();
}
inline const std::string& ShowAllRequestMessage::showall_request() const {
  // @@protoc_insertion_point(field_get:ShowAllRequestMessage.showall_request)
  return _internal_showall_request();
}
inline void ShowAllRequestMessage::set_showall_request(const std::string& value) {
  _internal_set_showall_request(value);
  // @@protoc_insertion_point(field_set:ShowAllRequestMessage.showall_request)
}
inline std::string* ShowAllRequestMessage::mutable_showall_request() {
  // @@protoc_insertion_point(field_mutable:ShowAllRequestMessage.showall_request)
  return _internal_mutable_showall_request();
}
inline const std::string& ShowAllRequestMessage::_internal_showall_request() const {
  return showall_request_.Get();
}
inline void ShowAllRequestMessage::_internal_set_showall_request(const std::string& value) {
  
  showall_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ShowAllRequestMessage::set_showall_request(std::string&& value) {
  
  showall_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ShowAllRequestMessage.showall_request)
}
inline void ShowAllRequestMessage::set_showall_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  showall_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ShowAllRequestMessage.showall_request)
}
inline void ShowAllRequestMessage::set_showall_request(const char* value,
    size_t size) {
  
  showall_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ShowAllRequestMessage.showall_request)
}
inline std::string* ShowAllRequestMessage::_internal_mutable_showall_request() {
  
  return showall_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ShowAllRequestMessage::release_showall_request() {
  // @@protoc_insertion_point(field_release:ShowAllRequestMessage.showall_request)
  return showall_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShowAllRequestMessage::set_allocated_showall_request(std::string* showall_request) {
  if (showall_request != nullptr) {
    
  } else {
    
  }
  showall_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), showall_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ShowAllRequestMessage.showall_request)
}

// -------------------------------------------------------------------

// RandomGenerateDBRequestMessage

// repeated string gen_request_key = 1;
inline int RandomGenerateDBRequestMessage::_internal_gen_request_key_size() const {
  return gen_request_key_.size();
}
inline int RandomGenerateDBRequestMessage::gen_request_key_size() const {
  return _internal_gen_request_key_size();
}
inline void RandomGenerateDBRequestMessage::clear_gen_request_key() {
  gen_request_key_.Clear();
}
inline std::string* RandomGenerateDBRequestMessage::add_gen_request_key() {
  // @@protoc_insertion_point(field_add_mutable:RandomGenerateDBRequestMessage.gen_request_key)
  return _internal_add_gen_request_key();
}
inline const std::string& RandomGenerateDBRequestMessage::_internal_gen_request_key(int index) const {
  return gen_request_key_.Get(index);
}
inline const std::string& RandomGenerateDBRequestMessage::gen_request_key(int index) const {
  // @@protoc_insertion_point(field_get:RandomGenerateDBRequestMessage.gen_request_key)
  return _internal_gen_request_key(index);
}
inline std::string* RandomGenerateDBRequestMessage::mutable_gen_request_key(int index) {
  // @@protoc_insertion_point(field_mutable:RandomGenerateDBRequestMessage.gen_request_key)
  return gen_request_key_.Mutable(index);
}
inline void RandomGenerateDBRequestMessage::set_gen_request_key(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RandomGenerateDBRequestMessage.gen_request_key)
  gen_request_key_.Mutable(index)->assign(value);
}
inline void RandomGenerateDBRequestMessage::set_gen_request_key(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RandomGenerateDBRequestMessage.gen_request_key)
  gen_request_key_.Mutable(index)->assign(std::move(value));
}
inline void RandomGenerateDBRequestMessage::set_gen_request_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gen_request_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RandomGenerateDBRequestMessage.gen_request_key)
}
inline void RandomGenerateDBRequestMessage::set_gen_request_key(int index, const char* value, size_t size) {
  gen_request_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RandomGenerateDBRequestMessage.gen_request_key)
}
inline std::string* RandomGenerateDBRequestMessage::_internal_add_gen_request_key() {
  return gen_request_key_.Add();
}
inline void RandomGenerateDBRequestMessage::add_gen_request_key(const std::string& value) {
  gen_request_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RandomGenerateDBRequestMessage.gen_request_key)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_key(std::string&& value) {
  gen_request_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RandomGenerateDBRequestMessage.gen_request_key)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gen_request_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RandomGenerateDBRequestMessage.gen_request_key)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_key(const char* value, size_t size) {
  gen_request_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RandomGenerateDBRequestMessage.gen_request_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RandomGenerateDBRequestMessage::gen_request_key() const {
  // @@protoc_insertion_point(field_list:RandomGenerateDBRequestMessage.gen_request_key)
  return gen_request_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RandomGenerateDBRequestMessage::mutable_gen_request_key() {
  // @@protoc_insertion_point(field_mutable_list:RandomGenerateDBRequestMessage.gen_request_key)
  return &gen_request_key_;
}

// repeated string gen_request_value = 2;
inline int RandomGenerateDBRequestMessage::_internal_gen_request_value_size() const {
  return gen_request_value_.size();
}
inline int RandomGenerateDBRequestMessage::gen_request_value_size() const {
  return _internal_gen_request_value_size();
}
inline void RandomGenerateDBRequestMessage::clear_gen_request_value() {
  gen_request_value_.Clear();
}
inline std::string* RandomGenerateDBRequestMessage::add_gen_request_value() {
  // @@protoc_insertion_point(field_add_mutable:RandomGenerateDBRequestMessage.gen_request_value)
  return _internal_add_gen_request_value();
}
inline const std::string& RandomGenerateDBRequestMessage::_internal_gen_request_value(int index) const {
  return gen_request_value_.Get(index);
}
inline const std::string& RandomGenerateDBRequestMessage::gen_request_value(int index) const {
  // @@protoc_insertion_point(field_get:RandomGenerateDBRequestMessage.gen_request_value)
  return _internal_gen_request_value(index);
}
inline std::string* RandomGenerateDBRequestMessage::mutable_gen_request_value(int index) {
  // @@protoc_insertion_point(field_mutable:RandomGenerateDBRequestMessage.gen_request_value)
  return gen_request_value_.Mutable(index);
}
inline void RandomGenerateDBRequestMessage::set_gen_request_value(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:RandomGenerateDBRequestMessage.gen_request_value)
  gen_request_value_.Mutable(index)->assign(value);
}
inline void RandomGenerateDBRequestMessage::set_gen_request_value(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:RandomGenerateDBRequestMessage.gen_request_value)
  gen_request_value_.Mutable(index)->assign(std::move(value));
}
inline void RandomGenerateDBRequestMessage::set_gen_request_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gen_request_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:RandomGenerateDBRequestMessage.gen_request_value)
}
inline void RandomGenerateDBRequestMessage::set_gen_request_value(int index, const char* value, size_t size) {
  gen_request_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:RandomGenerateDBRequestMessage.gen_request_value)
}
inline std::string* RandomGenerateDBRequestMessage::_internal_add_gen_request_value() {
  return gen_request_value_.Add();
}
inline void RandomGenerateDBRequestMessage::add_gen_request_value(const std::string& value) {
  gen_request_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:RandomGenerateDBRequestMessage.gen_request_value)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_value(std::string&& value) {
  gen_request_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:RandomGenerateDBRequestMessage.gen_request_value)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  gen_request_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:RandomGenerateDBRequestMessage.gen_request_value)
}
inline void RandomGenerateDBRequestMessage::add_gen_request_value(const char* value, size_t size) {
  gen_request_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:RandomGenerateDBRequestMessage.gen_request_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RandomGenerateDBRequestMessage::gen_request_value() const {
  // @@protoc_insertion_point(field_list:RandomGenerateDBRequestMessage.gen_request_value)
  return gen_request_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RandomGenerateDBRequestMessage::mutable_gen_request_value() {
  // @@protoc_insertion_point(field_mutable_list:RandomGenerateDBRequestMessage.gen_request_value)
  return &gen_request_value_;
}

// -------------------------------------------------------------------

// ClearRequestMessage

// string clear_request = 1;
inline void ClearRequestMessage::clear_clear_request() {
  clear_request_.ClearToEmpty();
}
inline const std::string& ClearRequestMessage::clear_request() const {
  // @@protoc_insertion_point(field_get:ClearRequestMessage.clear_request)
  return _internal_clear_request();
}
inline void ClearRequestMessage::set_clear_request(const std::string& value) {
  _internal_set_clear_request(value);
  // @@protoc_insertion_point(field_set:ClearRequestMessage.clear_request)
}
inline std::string* ClearRequestMessage::mutable_clear_request() {
  // @@protoc_insertion_point(field_mutable:ClearRequestMessage.clear_request)
  return _internal_mutable_clear_request();
}
inline const std::string& ClearRequestMessage::_internal_clear_request() const {
  return clear_request_.Get();
}
inline void ClearRequestMessage::_internal_set_clear_request(const std::string& value) {
  
  clear_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClearRequestMessage::set_clear_request(std::string&& value) {
  
  clear_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClearRequestMessage.clear_request)
}
inline void ClearRequestMessage::set_clear_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clear_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClearRequestMessage.clear_request)
}
inline void ClearRequestMessage::set_clear_request(const char* value,
    size_t size) {
  
  clear_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClearRequestMessage.clear_request)
}
inline std::string* ClearRequestMessage::_internal_mutable_clear_request() {
  
  return clear_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClearRequestMessage::release_clear_request() {
  // @@protoc_insertion_point(field_release:ClearRequestMessage.clear_request)
  return clear_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClearRequestMessage::set_allocated_clear_request(std::string* clear_request) {
  if (clear_request != nullptr) {
    
  } else {
    
  }
  clear_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clear_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClearRequestMessage.clear_request)
}

// -------------------------------------------------------------------

// DestroyRequestMessage

// string destroy_request = 1;
inline void DestroyRequestMessage::clear_destroy_request() {
  destroy_request_.ClearToEmpty();
}
inline const std::string& DestroyRequestMessage::destroy_request() const {
  // @@protoc_insertion_point(field_get:DestroyRequestMessage.destroy_request)
  return _internal_destroy_request();
}
inline void DestroyRequestMessage::set_destroy_request(const std::string& value) {
  _internal_set_destroy_request(value);
  // @@protoc_insertion_point(field_set:DestroyRequestMessage.destroy_request)
}
inline std::string* DestroyRequestMessage::mutable_destroy_request() {
  // @@protoc_insertion_point(field_mutable:DestroyRequestMessage.destroy_request)
  return _internal_mutable_destroy_request();
}
inline const std::string& DestroyRequestMessage::_internal_destroy_request() const {
  return destroy_request_.Get();
}
inline void DestroyRequestMessage::_internal_set_destroy_request(const std::string& value) {
  
  destroy_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DestroyRequestMessage::set_destroy_request(std::string&& value) {
  
  destroy_request_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DestroyRequestMessage.destroy_request)
}
inline void DestroyRequestMessage::set_destroy_request(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destroy_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DestroyRequestMessage.destroy_request)
}
inline void DestroyRequestMessage::set_destroy_request(const char* value,
    size_t size) {
  
  destroy_request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DestroyRequestMessage.destroy_request)
}
inline std::string* DestroyRequestMessage::_internal_mutable_destroy_request() {
  
  return destroy_request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DestroyRequestMessage::release_destroy_request() {
  // @@protoc_insertion_point(field_release:DestroyRequestMessage.destroy_request)
  return destroy_request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DestroyRequestMessage::set_allocated_destroy_request(std::string* destroy_request) {
  if (destroy_request != nullptr) {
    
  } else {
    
  }
  destroy_request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destroy_request,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DestroyRequestMessage.destroy_request)
}

// -------------------------------------------------------------------

// SetupResponseMessage

// string setup_response = 1;
inline void SetupResponseMessage::clear_setup_response() {
  setup_response_.ClearToEmpty();
}
inline const std::string& SetupResponseMessage::setup_response() const {
  // @@protoc_insertion_point(field_get:SetupResponseMessage.setup_response)
  return _internal_setup_response();
}
inline void SetupResponseMessage::set_setup_response(const std::string& value) {
  _internal_set_setup_response(value);
  // @@protoc_insertion_point(field_set:SetupResponseMessage.setup_response)
}
inline std::string* SetupResponseMessage::mutable_setup_response() {
  // @@protoc_insertion_point(field_mutable:SetupResponseMessage.setup_response)
  return _internal_mutable_setup_response();
}
inline const std::string& SetupResponseMessage::_internal_setup_response() const {
  return setup_response_.Get();
}
inline void SetupResponseMessage::_internal_set_setup_response(const std::string& value) {
  
  setup_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SetupResponseMessage::set_setup_response(std::string&& value) {
  
  setup_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SetupResponseMessage.setup_response)
}
inline void SetupResponseMessage::set_setup_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  setup_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:SetupResponseMessage.setup_response)
}
inline void SetupResponseMessage::set_setup_response(const char* value,
    size_t size) {
  
  setup_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SetupResponseMessage.setup_response)
}
inline std::string* SetupResponseMessage::_internal_mutable_setup_response() {
  
  return setup_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SetupResponseMessage::release_setup_response() {
  // @@protoc_insertion_point(field_release:SetupResponseMessage.setup_response)
  return setup_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupResponseMessage::set_allocated_setup_response(std::string* setup_response) {
  if (setup_response != nullptr) {
    
  } else {
    
  }
  setup_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), setup_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SetupResponseMessage.setup_response)
}

// -------------------------------------------------------------------

// SearchResponseMessage

// repeated string search_response = 1;
inline int SearchResponseMessage::_internal_search_response_size() const {
  return search_response_.size();
}
inline int SearchResponseMessage::search_response_size() const {
  return _internal_search_response_size();
}
inline void SearchResponseMessage::clear_search_response() {
  search_response_.Clear();
}
inline std::string* SearchResponseMessage::add_search_response() {
  // @@protoc_insertion_point(field_add_mutable:SearchResponseMessage.search_response)
  return _internal_add_search_response();
}
inline const std::string& SearchResponseMessage::_internal_search_response(int index) const {
  return search_response_.Get(index);
}
inline const std::string& SearchResponseMessage::search_response(int index) const {
  // @@protoc_insertion_point(field_get:SearchResponseMessage.search_response)
  return _internal_search_response(index);
}
inline std::string* SearchResponseMessage::mutable_search_response(int index) {
  // @@protoc_insertion_point(field_mutable:SearchResponseMessage.search_response)
  return search_response_.Mutable(index);
}
inline void SearchResponseMessage::set_search_response(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:SearchResponseMessage.search_response)
  search_response_.Mutable(index)->assign(value);
}
inline void SearchResponseMessage::set_search_response(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:SearchResponseMessage.search_response)
  search_response_.Mutable(index)->assign(std::move(value));
}
inline void SearchResponseMessage::set_search_response(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_response_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SearchResponseMessage.search_response)
}
inline void SearchResponseMessage::set_search_response(int index, const char* value, size_t size) {
  search_response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SearchResponseMessage.search_response)
}
inline std::string* SearchResponseMessage::_internal_add_search_response() {
  return search_response_.Add();
}
inline void SearchResponseMessage::add_search_response(const std::string& value) {
  search_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SearchResponseMessage.search_response)
}
inline void SearchResponseMessage::add_search_response(std::string&& value) {
  search_response_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:SearchResponseMessage.search_response)
}
inline void SearchResponseMessage::add_search_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  search_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SearchResponseMessage.search_response)
}
inline void SearchResponseMessage::add_search_response(const char* value, size_t size) {
  search_response_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SearchResponseMessage.search_response)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SearchResponseMessage::search_response() const {
  // @@protoc_insertion_point(field_list:SearchResponseMessage.search_response)
  return search_response_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SearchResponseMessage::mutable_search_response() {
  // @@protoc_insertion_point(field_mutable_list:SearchResponseMessage.search_response)
  return &search_response_;
}

// -------------------------------------------------------------------

// AddResponseMessage

// string add_response = 1;
inline void AddResponseMessage::clear_add_response() {
  add_response_.ClearToEmpty();
}
inline const std::string& AddResponseMessage::add_response() const {
  // @@protoc_insertion_point(field_get:AddResponseMessage.add_response)
  return _internal_add_response();
}
inline void AddResponseMessage::set_add_response(const std::string& value) {
  _internal_set_add_response(value);
  // @@protoc_insertion_point(field_set:AddResponseMessage.add_response)
}
inline std::string* AddResponseMessage::mutable_add_response() {
  // @@protoc_insertion_point(field_mutable:AddResponseMessage.add_response)
  return _internal_mutable_add_response();
}
inline const std::string& AddResponseMessage::_internal_add_response() const {
  return add_response_.Get();
}
inline void AddResponseMessage::_internal_set_add_response(const std::string& value) {
  
  add_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddResponseMessage::set_add_response(std::string&& value) {
  
  add_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:AddResponseMessage.add_response)
}
inline void AddResponseMessage::set_add_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  add_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:AddResponseMessage.add_response)
}
inline void AddResponseMessage::set_add_response(const char* value,
    size_t size) {
  
  add_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:AddResponseMessage.add_response)
}
inline std::string* AddResponseMessage::_internal_mutable_add_response() {
  
  return add_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddResponseMessage::release_add_response() {
  // @@protoc_insertion_point(field_release:AddResponseMessage.add_response)
  return add_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AddResponseMessage::set_allocated_add_response(std::string* add_response) {
  if (add_response != nullptr) {
    
  } else {
    
  }
  add_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), add_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:AddResponseMessage.add_response)
}

// -------------------------------------------------------------------

// DeleteResponseMessage

// repeated string delete_response = 1;
inline int DeleteResponseMessage::_internal_delete_response_size() const {
  return delete_response_.size();
}
inline int DeleteResponseMessage::delete_response_size() const {
  return _internal_delete_response_size();
}
inline void DeleteResponseMessage::clear_delete_response() {
  delete_response_.Clear();
}
inline std::string* DeleteResponseMessage::add_delete_response() {
  // @@protoc_insertion_point(field_add_mutable:DeleteResponseMessage.delete_response)
  return _internal_add_delete_response();
}
inline const std::string& DeleteResponseMessage::_internal_delete_response(int index) const {
  return delete_response_.Get(index);
}
inline const std::string& DeleteResponseMessage::delete_response(int index) const {
  // @@protoc_insertion_point(field_get:DeleteResponseMessage.delete_response)
  return _internal_delete_response(index);
}
inline std::string* DeleteResponseMessage::mutable_delete_response(int index) {
  // @@protoc_insertion_point(field_mutable:DeleteResponseMessage.delete_response)
  return delete_response_.Mutable(index);
}
inline void DeleteResponseMessage::set_delete_response(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DeleteResponseMessage.delete_response)
  delete_response_.Mutable(index)->assign(value);
}
inline void DeleteResponseMessage::set_delete_response(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DeleteResponseMessage.delete_response)
  delete_response_.Mutable(index)->assign(std::move(value));
}
inline void DeleteResponseMessage::set_delete_response(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delete_response_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DeleteResponseMessage.delete_response)
}
inline void DeleteResponseMessage::set_delete_response(int index, const char* value, size_t size) {
  delete_response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DeleteResponseMessage.delete_response)
}
inline std::string* DeleteResponseMessage::_internal_add_delete_response() {
  return delete_response_.Add();
}
inline void DeleteResponseMessage::add_delete_response(const std::string& value) {
  delete_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DeleteResponseMessage.delete_response)
}
inline void DeleteResponseMessage::add_delete_response(std::string&& value) {
  delete_response_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DeleteResponseMessage.delete_response)
}
inline void DeleteResponseMessage::add_delete_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  delete_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DeleteResponseMessage.delete_response)
}
inline void DeleteResponseMessage::add_delete_response(const char* value, size_t size) {
  delete_response_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DeleteResponseMessage.delete_response)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteResponseMessage::delete_response() const {
  // @@protoc_insertion_point(field_list:DeleteResponseMessage.delete_response)
  return delete_response_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteResponseMessage::mutable_delete_response() {
  // @@protoc_insertion_point(field_mutable_list:DeleteResponseMessage.delete_response)
  return &delete_response_;
}

// -------------------------------------------------------------------

// ShowAllResponseMessage

// repeated string showall_response = 1;
inline int ShowAllResponseMessage::_internal_showall_response_size() const {
  return showall_response_.size();
}
inline int ShowAllResponseMessage::showall_response_size() const {
  return _internal_showall_response_size();
}
inline void ShowAllResponseMessage::clear_showall_response() {
  showall_response_.Clear();
}
inline std::string* ShowAllResponseMessage::add_showall_response() {
  // @@protoc_insertion_point(field_add_mutable:ShowAllResponseMessage.showall_response)
  return _internal_add_showall_response();
}
inline const std::string& ShowAllResponseMessage::_internal_showall_response(int index) const {
  return showall_response_.Get(index);
}
inline const std::string& ShowAllResponseMessage::showall_response(int index) const {
  // @@protoc_insertion_point(field_get:ShowAllResponseMessage.showall_response)
  return _internal_showall_response(index);
}
inline std::string* ShowAllResponseMessage::mutable_showall_response(int index) {
  // @@protoc_insertion_point(field_mutable:ShowAllResponseMessage.showall_response)
  return showall_response_.Mutable(index);
}
inline void ShowAllResponseMessage::set_showall_response(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ShowAllResponseMessage.showall_response)
  showall_response_.Mutable(index)->assign(value);
}
inline void ShowAllResponseMessage::set_showall_response(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ShowAllResponseMessage.showall_response)
  showall_response_.Mutable(index)->assign(std::move(value));
}
inline void ShowAllResponseMessage::set_showall_response(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  showall_response_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ShowAllResponseMessage.showall_response)
}
inline void ShowAllResponseMessage::set_showall_response(int index, const char* value, size_t size) {
  showall_response_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ShowAllResponseMessage.showall_response)
}
inline std::string* ShowAllResponseMessage::_internal_add_showall_response() {
  return showall_response_.Add();
}
inline void ShowAllResponseMessage::add_showall_response(const std::string& value) {
  showall_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ShowAllResponseMessage.showall_response)
}
inline void ShowAllResponseMessage::add_showall_response(std::string&& value) {
  showall_response_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ShowAllResponseMessage.showall_response)
}
inline void ShowAllResponseMessage::add_showall_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  showall_response_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ShowAllResponseMessage.showall_response)
}
inline void ShowAllResponseMessage::add_showall_response(const char* value, size_t size) {
  showall_response_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ShowAllResponseMessage.showall_response)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ShowAllResponseMessage::showall_response() const {
  // @@protoc_insertion_point(field_list:ShowAllResponseMessage.showall_response)
  return showall_response_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ShowAllResponseMessage::mutable_showall_response() {
  // @@protoc_insertion_point(field_mutable_list:ShowAllResponseMessage.showall_response)
  return &showall_response_;
}

// -------------------------------------------------------------------

// RandomGenerateDBResponseMessage

// string gen_response = 1;
inline void RandomGenerateDBResponseMessage::clear_gen_response() {
  gen_response_.ClearToEmpty();
}
inline const std::string& RandomGenerateDBResponseMessage::gen_response() const {
  // @@protoc_insertion_point(field_get:RandomGenerateDBResponseMessage.gen_response)
  return _internal_gen_response();
}
inline void RandomGenerateDBResponseMessage::set_gen_response(const std::string& value) {
  _internal_set_gen_response(value);
  // @@protoc_insertion_point(field_set:RandomGenerateDBResponseMessage.gen_response)
}
inline std::string* RandomGenerateDBResponseMessage::mutable_gen_response() {
  // @@protoc_insertion_point(field_mutable:RandomGenerateDBResponseMessage.gen_response)
  return _internal_mutable_gen_response();
}
inline const std::string& RandomGenerateDBResponseMessage::_internal_gen_response() const {
  return gen_response_.Get();
}
inline void RandomGenerateDBResponseMessage::_internal_set_gen_response(const std::string& value) {
  
  gen_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void RandomGenerateDBResponseMessage::set_gen_response(std::string&& value) {
  
  gen_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RandomGenerateDBResponseMessage.gen_response)
}
inline void RandomGenerateDBResponseMessage::set_gen_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gen_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:RandomGenerateDBResponseMessage.gen_response)
}
inline void RandomGenerateDBResponseMessage::set_gen_response(const char* value,
    size_t size) {
  
  gen_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RandomGenerateDBResponseMessage.gen_response)
}
inline std::string* RandomGenerateDBResponseMessage::_internal_mutable_gen_response() {
  
  return gen_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* RandomGenerateDBResponseMessage::release_gen_response() {
  // @@protoc_insertion_point(field_release:RandomGenerateDBResponseMessage.gen_response)
  return gen_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RandomGenerateDBResponseMessage::set_allocated_gen_response(std::string* gen_response) {
  if (gen_response != nullptr) {
    
  } else {
    
  }
  gen_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gen_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RandomGenerateDBResponseMessage.gen_response)
}

// -------------------------------------------------------------------

// ClearResponseMessage

// string clear_response = 1;
inline void ClearResponseMessage::clear_clear_response() {
  clear_response_.ClearToEmpty();
}
inline const std::string& ClearResponseMessage::clear_response() const {
  // @@protoc_insertion_point(field_get:ClearResponseMessage.clear_response)
  return _internal_clear_response();
}
inline void ClearResponseMessage::set_clear_response(const std::string& value) {
  _internal_set_clear_response(value);
  // @@protoc_insertion_point(field_set:ClearResponseMessage.clear_response)
}
inline std::string* ClearResponseMessage::mutable_clear_response() {
  // @@protoc_insertion_point(field_mutable:ClearResponseMessage.clear_response)
  return _internal_mutable_clear_response();
}
inline const std::string& ClearResponseMessage::_internal_clear_response() const {
  return clear_response_.Get();
}
inline void ClearResponseMessage::_internal_set_clear_response(const std::string& value) {
  
  clear_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ClearResponseMessage::set_clear_response(std::string&& value) {
  
  clear_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ClearResponseMessage.clear_response)
}
inline void ClearResponseMessage::set_clear_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  clear_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:ClearResponseMessage.clear_response)
}
inline void ClearResponseMessage::set_clear_response(const char* value,
    size_t size) {
  
  clear_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ClearResponseMessage.clear_response)
}
inline std::string* ClearResponseMessage::_internal_mutable_clear_response() {
  
  return clear_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ClearResponseMessage::release_clear_response() {
  // @@protoc_insertion_point(field_release:ClearResponseMessage.clear_response)
  return clear_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClearResponseMessage::set_allocated_clear_response(std::string* clear_response) {
  if (clear_response != nullptr) {
    
  } else {
    
  }
  clear_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clear_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ClearResponseMessage.clear_response)
}

// -------------------------------------------------------------------

// DestroyResponseMessage

// string destroy_response = 1;
inline void DestroyResponseMessage::clear_destroy_response() {
  destroy_response_.ClearToEmpty();
}
inline const std::string& DestroyResponseMessage::destroy_response() const {
  // @@protoc_insertion_point(field_get:DestroyResponseMessage.destroy_response)
  return _internal_destroy_response();
}
inline void DestroyResponseMessage::set_destroy_response(const std::string& value) {
  _internal_set_destroy_response(value);
  // @@protoc_insertion_point(field_set:DestroyResponseMessage.destroy_response)
}
inline std::string* DestroyResponseMessage::mutable_destroy_response() {
  // @@protoc_insertion_point(field_mutable:DestroyResponseMessage.destroy_response)
  return _internal_mutable_destroy_response();
}
inline const std::string& DestroyResponseMessage::_internal_destroy_response() const {
  return destroy_response_.Get();
}
inline void DestroyResponseMessage::_internal_set_destroy_response(const std::string& value) {
  
  destroy_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DestroyResponseMessage::set_destroy_response(std::string&& value) {
  
  destroy_response_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DestroyResponseMessage.destroy_response)
}
inline void DestroyResponseMessage::set_destroy_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destroy_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DestroyResponseMessage.destroy_response)
}
inline void DestroyResponseMessage::set_destroy_response(const char* value,
    size_t size) {
  
  destroy_response_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DestroyResponseMessage.destroy_response)
}
inline std::string* DestroyResponseMessage::_internal_mutable_destroy_response() {
  
  return destroy_response_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DestroyResponseMessage::release_destroy_response() {
  // @@protoc_insertion_point(field_release:DestroyResponseMessage.destroy_response)
  return destroy_response_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DestroyResponseMessage::set_allocated_destroy_response(std::string* destroy_response) {
  if (destroy_response != nullptr) {
    
  } else {
    
  }
  destroy_response_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destroy_response,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DestroyResponseMessage.destroy_response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rpc_2eproto
