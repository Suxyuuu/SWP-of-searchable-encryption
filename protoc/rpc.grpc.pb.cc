// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rpc.proto

#include "rpc.pb.h"
#include "rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* RPC_method_names[] = {
  "/RPC/setup",
  "/RPC/search",
  "/RPC/add_data",
  "/RPC/delete_data",
  "/RPC/show_all",
  "/RPC/RanGenDB",
  "/RPC/DestroyDB",
};

std::unique_ptr< RPC::Stub> RPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RPC::Stub> stub(new RPC::Stub(channel));
  return stub;
}

RPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_setup_(RPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_search_(RPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_add_data_(RPC_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_delete_data_(RPC_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_show_all_(RPC_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RanGenDB_(RPC_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DestroyDB_(RPC_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RPC::Stub::setup(::grpc::ClientContext* context, const ::SetupRequestMessage& request, ::SetupResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SetupRequestMessage, ::SetupResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_setup_, context, request, response);
}

void RPC::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupRequestMessage* request, ::SetupResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SetupRequestMessage, ::SetupResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::setup(::grpc::ClientContext* context, const ::SetupRequestMessage* request, ::SetupResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_setup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SetupResponseMessage>* RPC::Stub::PrepareAsyncsetupRaw(::grpc::ClientContext* context, const ::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SetupResponseMessage, ::SetupRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_setup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SetupResponseMessage>* RPC::Stub::AsyncsetupRaw(::grpc::ClientContext* context, const ::SetupRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::search(::grpc::ClientContext* context, const ::SearchRequestMessage& request, ::SearchResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::SearchRequestMessage, ::SearchResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_search_, context, request, response);
}

void RPC::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchRequestMessage* request, ::SearchResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::SearchRequestMessage, ::SearchResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::search(::grpc::ClientContext* context, const ::SearchRequestMessage* request, ::SearchResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_search_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::SearchResponseMessage>* RPC::Stub::PrepareAsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::SearchResponseMessage, ::SearchRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_search_, context, request);
}

::grpc::ClientAsyncResponseReader< ::SearchResponseMessage>* RPC::Stub::AsyncsearchRaw(::grpc::ClientContext* context, const ::SearchRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsearchRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::add_data(::grpc::ClientContext* context, const ::AddRequestMessage& request, ::AddResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::AddRequestMessage, ::AddResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_add_data_, context, request, response);
}

void RPC::Stub::experimental_async::add_data(::grpc::ClientContext* context, const ::AddRequestMessage* request, ::AddResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::AddRequestMessage, ::AddResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_data_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::add_data(::grpc::ClientContext* context, const ::AddRequestMessage* request, ::AddResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_add_data_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::AddResponseMessage>* RPC::Stub::PrepareAsyncadd_dataRaw(::grpc::ClientContext* context, const ::AddRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::AddResponseMessage, ::AddRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_add_data_, context, request);
}

::grpc::ClientAsyncResponseReader< ::AddResponseMessage>* RPC::Stub::Asyncadd_dataRaw(::grpc::ClientContext* context, const ::AddRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncadd_dataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::delete_data(::grpc::ClientContext* context, const ::DeleteRequestMessage& request, ::DeleteResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DeleteRequestMessage, ::DeleteResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_delete_data_, context, request, response);
}

void RPC::Stub::experimental_async::delete_data(::grpc::ClientContext* context, const ::DeleteRequestMessage* request, ::DeleteResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DeleteRequestMessage, ::DeleteResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_data_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::delete_data(::grpc::ClientContext* context, const ::DeleteRequestMessage* request, ::DeleteResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_delete_data_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DeleteResponseMessage>* RPC::Stub::PrepareAsyncdelete_dataRaw(::grpc::ClientContext* context, const ::DeleteRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DeleteResponseMessage, ::DeleteRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_delete_data_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DeleteResponseMessage>* RPC::Stub::Asyncdelete_dataRaw(::grpc::ClientContext* context, const ::DeleteRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncdelete_dataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::show_all(::grpc::ClientContext* context, const ::ShowAllRequestMessage& request, ::ShowAllResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ShowAllRequestMessage, ::ShowAllResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_show_all_, context, request, response);
}

void RPC::Stub::experimental_async::show_all(::grpc::ClientContext* context, const ::ShowAllRequestMessage* request, ::ShowAllResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ShowAllRequestMessage, ::ShowAllResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_show_all_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::show_all(::grpc::ClientContext* context, const ::ShowAllRequestMessage* request, ::ShowAllResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_show_all_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ShowAllResponseMessage>* RPC::Stub::PrepareAsyncshow_allRaw(::grpc::ClientContext* context, const ::ShowAllRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ShowAllResponseMessage, ::ShowAllRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_show_all_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ShowAllResponseMessage>* RPC::Stub::Asyncshow_allRaw(::grpc::ClientContext* context, const ::ShowAllRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncshow_allRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::RanGenDB(::grpc::ClientContext* context, const ::RandomGenerateDBRequestMessage& request, ::RandomGenerateDBResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RandomGenerateDBRequestMessage, ::RandomGenerateDBResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RanGenDB_, context, request, response);
}

void RPC::Stub::experimental_async::RanGenDB(::grpc::ClientContext* context, const ::RandomGenerateDBRequestMessage* request, ::RandomGenerateDBResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RandomGenerateDBRequestMessage, ::RandomGenerateDBResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RanGenDB_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::RanGenDB(::grpc::ClientContext* context, const ::RandomGenerateDBRequestMessage* request, ::RandomGenerateDBResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RanGenDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RandomGenerateDBResponseMessage>* RPC::Stub::PrepareAsyncRanGenDBRaw(::grpc::ClientContext* context, const ::RandomGenerateDBRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RandomGenerateDBResponseMessage, ::RandomGenerateDBRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RanGenDB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RandomGenerateDBResponseMessage>* RPC::Stub::AsyncRanGenDBRaw(::grpc::ClientContext* context, const ::RandomGenerateDBRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRanGenDBRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RPC::Stub::DestroyDB(::grpc::ClientContext* context, const ::DestroyRequestMessage& request, ::DestroyResponseMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::DestroyRequestMessage, ::DestroyResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DestroyDB_, context, request, response);
}

void RPC::Stub::experimental_async::DestroyDB(::grpc::ClientContext* context, const ::DestroyRequestMessage* request, ::DestroyResponseMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::DestroyRequestMessage, ::DestroyResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyDB_, context, request, response, std::move(f));
}

void RPC::Stub::experimental_async::DestroyDB(::grpc::ClientContext* context, const ::DestroyRequestMessage* request, ::DestroyResponseMessage* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DestroyDB_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::DestroyResponseMessage>* RPC::Stub::PrepareAsyncDestroyDBRaw(::grpc::ClientContext* context, const ::DestroyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::DestroyResponseMessage, ::DestroyRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DestroyDB_, context, request);
}

::grpc::ClientAsyncResponseReader< ::DestroyResponseMessage>* RPC::Stub::AsyncDestroyDBRaw(::grpc::ClientContext* context, const ::DestroyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDestroyDBRaw(context, request, cq);
  result->StartCall();
  return result;
}

RPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::SetupRequestMessage, ::SetupResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SetupRequestMessage* req,
             ::SetupResponseMessage* resp) {
               return service->setup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::SearchRequestMessage, ::SearchResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::SearchRequestMessage* req,
             ::SearchResponseMessage* resp) {
               return service->search(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::AddRequestMessage, ::AddResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::AddRequestMessage* req,
             ::AddResponseMessage* resp) {
               return service->add_data(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DeleteRequestMessage, ::DeleteResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DeleteRequestMessage* req,
             ::DeleteResponseMessage* resp) {
               return service->delete_data(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::ShowAllRequestMessage, ::ShowAllResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ShowAllRequestMessage* req,
             ::ShowAllResponseMessage* resp) {
               return service->show_all(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::RandomGenerateDBRequestMessage, ::RandomGenerateDBResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RandomGenerateDBRequestMessage* req,
             ::RandomGenerateDBResponseMessage* resp) {
               return service->RanGenDB(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RPC_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RPC::Service, ::DestroyRequestMessage, ::DestroyResponseMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::DestroyRequestMessage* req,
             ::DestroyResponseMessage* resp) {
               return service->DestroyDB(ctx, req, resp);
             }, this)));
}

RPC::Service::~Service() {
}

::grpc::Status RPC::Service::setup(::grpc::ServerContext* context, const ::SetupRequestMessage* request, ::SetupResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::search(::grpc::ServerContext* context, const ::SearchRequestMessage* request, ::SearchResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::add_data(::grpc::ServerContext* context, const ::AddRequestMessage* request, ::AddResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::delete_data(::grpc::ServerContext* context, const ::DeleteRequestMessage* request, ::DeleteResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::show_all(::grpc::ServerContext* context, const ::ShowAllRequestMessage* request, ::ShowAllResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::RanGenDB(::grpc::ServerContext* context, const ::RandomGenerateDBRequestMessage* request, ::RandomGenerateDBResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RPC::Service::DestroyDB(::grpc::ServerContext* context, const ::DestroyRequestMessage* request, ::DestroyResponseMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


